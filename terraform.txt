The content of terraform is available in
    session 36 (URL: https://youtu.be/eDrqpJ-oMyk?list=PLLmNg_q93mewHYKnfY1ECkYRtF1ISe_Za )
    session 37 (URL: https://youtu.be/FP0U01YNyQU?list=PLLmNg_q93mewHYKnfY1ECkYRtF1ISe_Za )
    session 38 (URL:

Install Terraform?
------------------------------------------------------------
   1. Go to the website terraform.io
   2. select the option download terraform
   3. select the operating system you are using if you sing linux then select the application you are using
       now we are using Centos/RHEL
   4. follow the approach nd install terraform.

What is a terraform?
------------------------------------------------------------
  HashiCorp Terraform is an infrastructure as code (IaC) software tool that allows DevOps teams to automate infrastructure
  provisioning using reusable, shareable, human-readable configuration files. The tool can automate infrastructure
  provisioning in both on-premises and cloud environments.

Why IAC?
------------------------------------------------------------
  1. Time to production is faster
  2. Less Configuration Drift
  3. Reduces Cost
       Its not about the infra cost

Alternatives to Terraform
------------------------------------------------------------
  1. Pulumi
  2. Crossplane
  3. Ansible

HCL - HarshiCorp Configuration Language is a terraform language
----------------------------------------------------------------

Terraform is introduced some other languages other then HCL

How HCL code will Look like is
------------------------------------------------------------
resource "abc" "xyz"
{
   x = 10
   y = 10
}

 --> Code is in blocks {}
 --> Here we are seeing resource block, More such blocks re offered by terraform
       resource, variable, output, data, local, module, provider blocks are the blocks offered by terraform.
 --> resources are under provider, &provider documentation.
 --> Here abc is a resource name which is offered by provider. it is must and should be same as offered by vendor.
 --> xyz is a local resource name we are giving to our resource
 --> x, y are called as arguments
 --> 10, 20 are inputs
 --> resources offers data after creation called as attribute.


Terraform Files:
------------------------------
 --> All Terraform files should end with .tf
 --> Terraform will load all the files in that location ending .tf, Meaning we can always make multiple files as per
      our requirement or organization.

Terraform Command:
------------------------------
The terraform is actually have some life cycle and the well known life cycle we use is:
------------------        ------------------        -------------------        ---------------------
|     INIT       |        |     PLAN       |        |   APPLY         |        |    DESTROY        |
| terraform init | -----> | terraform plan | -----> | terraform apply | -----> | terraform destroy |
------------------        ------------------        -------------------        ---------------------

Init    : Terraform Init will understand the code we hve written and download necessary provider plugins to run
           the code. it will also look for the syntax either it's good or bad and also check syntax errors. if
           everything is good then it going to download the appropriate plugins.

plan    : Terraform Plan will tell the execution plan that what it is planning to do when you actually apply.
          Example: if you ask for 3 servers it will create the 3 servers, if encase already 2 servers are created then
                   it will tell there are already 2 servers present so it is going to create 3rd server. so it will
                   show you the plan what it is trying to do.

Apply   : Terraform apply create the resource which are mentioned in the code. if the resource is already there then
           TF will not do anything

Destroy : Terraform Destroy is an optional options it not mandatory all the times.
          It will delete the resources which were been created so far by TF. However TF will not look for code to delete,
           it will delete created resource by TF.


The other way of declaring the variables is rather then declaring the input like this.
variable "fruits_with_quantity" {
  default = {
    apple = 100
    banana = 200
    orange = 300
  }
}

we can create a empty variable, here test1 does not have any variable here, so then we can pass the variable by creating
the var files(terraform.tfvars) file, this is the file which is split by terraform automatically to declare the variables.

variable "test1" {}
output "test1" {
  value = var.test1
}
Here test1 is the file where we have provided the input.
to run it just given terraform init --> terraform apply -auto-approval

But suppose we hve declare a variable for env and we have provided the dev and prod env in 2 different files with  file
name as dev.tfvars & prod.tfvars now if we perform the same approach we have given to test1 file it will ask to enter the
value of env.  if we don't need to enter the we can directly declare in this way
    terraform init --> terraform apply -auto-approval -var-file dev.tfvars  (or)
    terraform init --> terraform apply -auto-approval -var-file=dev.tfvars
in output we can see the env as dev if we want the prod env then we can provide prod.tfvars in palce of dev.tfvars.




We have used the variable topic for our expense project which is present in expense-v2
For this we have declared all the common variables in one file and provided these variables info in the input file, to
keep our code some how dry so if you ent to change anything so directly we can change in the input file.
     terraform init --> terraform apply -auto-approval -var-file=dev.tfvars
After submitting the above it will create 3 instance nd 3 dnf records

Modules in Terraform: (A group of resources which we created is called a module)
---------------------------
In Terraform, modules are a way to organize and reuse the code to define the infrastructure components.
Example: If i want to use a grouping by the wy i have to crete 2 resources and if i want to call the 2 resources at once
         then we use module

Here test folder is a module

Remote State In Terraform:
------------------------------------
By default, Terraform stores state locally in a file named terraform.tfstate. When working with Terraform in a team,
After executing the terraform apply we can able to see a file with terraform.tfstate by default.
But now i want to store it in s3 bucket. aprt form s3 we cn also store it in multiple places (ref: https://developer.hashicorp.com/terraform/language/settings/backends/s3)
Now to store it in s3 bucket we have given the below code

terraform {
  backend "s3" {
    bucket = "mahi-terraform-remote-state"
    key    = "test/terraform.tfstate"
    region = "us-east-1"
  }
}

resource "null_resource" "test" {}    ---> it is just to run the null resource

Now give terraform init --> terraform apply -auto-approve once it executed successfully if we give ls we can't see
terraform.tfstate because we are upload it to s3 bucket so it present in s3 bucket.

Now i want the people not to delete these files only the system need to delete so i can provide some policies.
The AWS control Tower has the policies that apply for all the accounts, none of the people should crete a public id,
in case even the administrator of the account also cannot create a local user(public ip). so keeping the file in s3
bucket is safe because we not loose the data init.




expense-v1 ---> creating instances and route53 with out dry code
expense-v2 ---> using variables topic to keep the code as dry
expense-v3 ---> Using loops topic
expense-v4 ---> Using Modules


